import {Markup, Telegraf} from 'telegraf';
import {MembersItem, User} from "./schemas/membersItem";

import {register, waitTextReply, waitBooleanReply} from "./core/waiters";
import {nanoid} from "nanoid";

import {sequelize} from "./core/database";

import Game, {GameOptions, GameState} from "./schemas/game";
import {CouplesItem} from "./schemas/couplesItem";

import config from './config.json';
import createKeyValue from "./core/level";

import {chunks, shuffle} from "./core/arrays";

const bot = new Telegraf(config.token);

register(bot);

(async () => {
    await sequelize.sync();

    const members = createKeyValue<MembersItem>('storage/members');
    const couples = createKeyValue<CouplesItem>('storage/couples');

    bot.start(async ctx => {
       ctx.reply(`üëÅ ‚Äç–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.\n–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ Telegram @nnstd_team\n\n–î–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–≥—Ä–µ –≤–≤–µ–¥–∏—Ç–µ /accept\n–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã –≤–≤–µ–¥–∏—Ç–µ /new`);
    });

    bot.command("new", async ctx => {
        if (ctx.chat.type !== 'private') {
            ctx.reply('–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ');
            return
        }

        let options: GameOptions = {};

        const needTopic = await waitBooleanReply(ctx, '–•–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ç–µ–º—É?');

        if (needTopic) {
            const topic = await waitTextReply(ctx, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É');
            if (!isNaN(topic.text)) {
                ctx.reply('üí¢ –í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
                return
            }

            options.topic = topic.text;
            await ctx.reply('–ü—Ä–∏–Ω—è—Ç–æ');
        }

        const needMinPrice = await waitBooleanReply(ctx, '–•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞?');
        if (needMinPrice) {
            const minPrice = await waitTextReply(ctx, '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É');

            if (isNaN(minPrice.text)) {
                ctx.reply('üí¢ –í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
                return
            }

            options.minPrice = parseInt(minPrice.text);
            await ctx.reply('–ü—Ä–∏–Ω—è—Ç–æ');
        }

        const membersLink = nanoid(12);
        const inviteCode = nanoid(12);

        const game = await Game.create({
            owner: ctx.from.id,
            members: membersLink,
            inviteCode: inviteCode,
            ownerChat: ctx.chat.id,
            ownerName: `${ctx.from.first_name} ${ctx.from.last_name}`,
            ...options
        });

        // @ts-ignore
        ctx.reply(`‚úî –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∏–∂–µ–æ–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∏–≥—Ä—É –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–≥—Ä—ã: ${game.id}\n–ü–∞—Ä–æ–ª—å: ${inviteCode}`);
    });

    bot.command('accept', async ctx => {
        const code = await waitTextReply(ctx, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');

        if (!isNaN(code.text)) {
            ctx.reply('üí¢ –í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
            return
        }

        Game.findOne({
            where: {
                inviteCode: code.text
            }
        }).then(async (game: any) => {
            if (game == null) {
                ctx.reply('üí¢ –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
                return;
            }

            if (game.owner === ctx.from.id) {
                ctx.reply('üí¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏–≥—Ä—ã, –∏ –Ω–µ –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ');
                return;
            }

            const getName = async (): Promise<string> => {
                const needCustomName = await waitBooleanReply(ctx, '–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—ë —Ç–µ–∫—É—â–µ–µ –∏–º—è? –û–Ω–æ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤—Å–µ–º –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–º —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ');

                let name = ctx.from.last_name == null ? ctx.from.first_name : `${ctx.from.first_name} ${ctx.from.last_name}`;

                if (needCustomName) {
                    const r = await waitTextReply(ctx, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è. –ú—ã –æ–ø–æ–≤–µ—Å—Ç–∏–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –∏–≥—Ä—ã –æ —Ç–æ–º, —á—Ç–æ –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å');
                    name = r.text;
                }

                return name
            }

            let d: MembersItem;
            let name: string;

            if (await members.has(game.members)) {
                d = await members.get(game.members);

                const duplicateIndex = d.list.findIndex(e => e.id === ctx.from.id);

                if (duplicateIndex !== -1) {
                    ctx.reply('‚ùå –í—ã —É–∂–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ');
                    return
                }

                name = await getName();

                d.list.push({
                    id: ctx.from.id,
                    name: name
                });
            } else {
                name = await getName();

                d = {
                    list: [
                        {
                            id: ctx.from.id,
                            name: name
                        }
                    ]
                }
            }

            await members.set(game.members, d);

            ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ');
            await bot.telegram.sendMessage(game.ownerChat, `'${name}' –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ`);
        });
    });

    bot.on('callback_query', async ctx => {
        // @ts-ignore
        const parts = ctx.callbackQuery.data.split('|');

        switch (parts[0]) {
            case 'members':
                let d = JSON.parse(parts[1]);

                Game.findOne({
                    where: {
                        id: d.i
                    }
                }).then(async (game: any) => {
                    let list: Array<User>;

                    if (await members.has(game.members)) {
                        list = (await members.get(game.members)).list;
                    } else {
                        list = [];
                    }

                    let m = `1. ${game.ownerName} (–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä)\n`;

                    list.forEach((e, i) => m += `${i+2}. ${e.name}\n`);

                    await ctx.reply(m);
                    ctx.answerCbQuery();
                });
                break;

            case 'start_game':
                let da = JSON.parse(parts[1]);

                Game.findOne({
                    where: {
                        id: da.i
                    }
                }).then(async (game: any) => {
                    if (game == null) {
                        ctx.reply('üí¢ –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                        ctx.answerCbQuery();
                        return;
                    }

                    let list: Array<User>;

                    if (!(await members.has(game.members))) {
                        ctx.reply('üí¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤');
                        return;
                    }

                    list = (await members.get(game.members)).list;
                    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
                    list.push({
                        id: game.owner,
                        name: game.ownerName
                    });

                    if (list.length < 2 || list.length % 2 === 1) {
                        ctx.reply('üí¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤');
                        return;
                    }

                    list = shuffle(list);
                    const couplesList = chunks(list, 2);
                    const couplesRaw = [];
                    couplesList.forEach((couple, i) => {
                        couplesRaw[i] = [];
                        couple.forEach((e, ie) => {
                            couplesRaw[i][ie] = e.id;
                            bot.telegram.sendMessage(e.id, `–í–∞–º –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏—Ç –≤–∞—à –ø–æ–¥–∞—Ä–æ–∫\n#${game.id}`);
                        });
                    });

                    await couples.set(game.members, couplesRaw);

                    game.state = GameState.Started;
                    game.save();

                    ctx.reply('–ò–≥—Ä–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞');
                    ctx.answerCbQuery();
                });
                break;

            case 'end_game':
                let db = JSON.parse(parts[1]);

                Game.findOne({
                    where: {
                        id: db.i
                    }
                }).then(async (game: any) => {
                    if (game == null) {
                        ctx.reply('üí¢ –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                        ctx.answerCbQuery();
                        return;
                    }

                    const membersList = (await members.get(game.members)).list;
                    membersList.push({
                        id: game.owner,
                        name: game.ownerName
                    });

                    const couplesList = await couples.get(game.members);

                    couplesList.forEach(c => {
                       c.forEach((ci, i) => {
                           const filtered = membersList.filter(e => e.id === c[0] || e.id === c[1]);
                           bot.telegram.sendMessage(ci, `–í—ã –¥–∞—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ ${filtered.find(e => e.id !== ci).name}`);
                       });
                    });

                    await bot.telegram.sendMessage(game.owner, '‚úÖ –ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞');
                    await game.destroy();

                    ctx.answerCbQuery();
                });
                break;
        }
    });

    bot.command('members', async ctx => {
        Game.findAll({
            where: {
                owner: ctx.from.id,
            }
        }).then((games: any[]) => {
            if (games.length === 0) {
                ctx.reply('‚Ñπ –°–ø–∏—Å–æ–∫ –∏–≥—Ä –ø—É—Å—Ç');
                return
            }

            let m = '–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:\n';

            games.forEach((e, i) => {
                m += e.topic == null ? `${i+1}. ‚Ññ${e.id}\n` : `${i+1}. ‚Ññ${e.id} - ${e.topic}\n`;
            });

            ctx.reply(m, Markup.inlineKeyboard(games.map(e => Markup.button.callback(e.id.toString(), `members|${JSON.stringify({
                i: e.id
            })}`))));
        });
    });

    bot.command('begin', async ctx => {
        Game.findAll({
            where: {
                state: GameState.Created,
                owner: ctx.from.id
            }
        }).then((games: Array<any>) => {
            if (games.length === 0) {
                ctx.reply('‚Ñπ –°–ø–∏—Å–æ–∫ –∏–≥—Ä –ø—É—Å—Ç');
                return
            }

            ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—á–∞—Ç—å', Markup.inlineKeyboard(games.map(e => Markup.button.callback(e.id.toString(), `start_game|${JSON.stringify({
                i: e.id
            })}`))));
        });
    });

    bot.command('end', async ctx => {
        Game.findAll({
            where: {
                state: GameState.Started,
                owner: ctx.from.id
            }
        }).then((games: Array<any>) => {
            if (games.length === 0) {
                ctx.reply('‚Ñπ –°–ø–∏—Å–æ–∫ –∏–≥—Ä –ø—É—Å—Ç');
                return
            }

            ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å', Markup.inlineKeyboard(games.map(e => Markup.button.callback(e.id.toString(), `end_game|${JSON.stringify({
                i: e.id
            })}`))));
        });
    });

    bot.launch().then(() => {
        console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
    });
})()
